/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coddiceroller;

import java.awt.*;
import java.awt.geom.*;
import javax.swing.text.*;

/**
 *
 * @author Dylan Veraart
 */
public class CoDDiceRoller extends javax.swing.JFrame {

  Roll roll;
  UndoQueue undoQueue;
  int boxSize = 20;
  Stroke defaultStroke = new BasicStroke(1.4f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER);
  Stroke thickStroke = new BasicStroke(2, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_MITER);
  Shape box[] = {new Rectangle(0, 0, boxSize, boxSize), new Line2D.Double(0, boxSize, boxSize, 0), new Line2D.Double(0, 0, boxSize, boxSize), new Line2D.Double(boxSize / 2, 0, boxSize / 2, boxSize)};

  /**
   * Creates new form CoDDiceRoller
   */
  public CoDDiceRoller() {
    undoQueue = new UndoQueue();
    initComponents();
    this.setLocationRelativeTo(null);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jTabbedPane1 = new javax.swing.JTabbedPane();
    jPanel1 = new javax.swing.JPanel();
    jPanel14 = new javax.swing.JPanel();
    againComboBox = new javax.swing.JComboBox<>();
    jLabel4 = new javax.swing.JLabel();
    jPanel4 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    diceSpinner = new javax.swing.JSpinner();
    rollButton = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    diceTextArea = new javax.swing.JTextArea();
    jPanel10 = new javax.swing.JPanel();
    houseRuleCheckBox = new javax.swing.JCheckBox();
    infoLabel = new javax.swing.JLabel();
    jPanel3 = new javax.swing.JPanel();
    jPanel5 = new javax.swing.JPanel();
    jPanel12 = new javax.swing.JPanel();
    jLabel5 = new javax.swing.JLabel();
    bashingSpinner = new javax.swing.JSpinner();
    jLabel6 = new javax.swing.JLabel();
    lethalSpinner = new javax.swing.JSpinner();
    jLabel7 = new javax.swing.JLabel();
    aggravatedSpinner = new javax.swing.JSpinner();
    jLabel8 = new javax.swing.JLabel();
    damageButton = new javax.swing.JButton();
    jPanel6 = new javax.swing.JPanel();
    jLabel2 = new javax.swing.JLabel();
    maxHealthSpinner = new javax.swing.JSpinner();
    setMaxHealthButton = new javax.swing.JButton();
    jPanel7 = new javax.swing.JPanel();
    healLabel = new javax.swing.JLabel();
    healSpinner = new javax.swing.JSpinner();
    healButton = new javax.swing.JButton();
    jSeparator1 = new javax.swing.JSeparator();
    downgradeButton = new javax.swing.JButton();
    jPanel13 = new javax.swing.JPanel();
    clearButton = new javax.swing.JButton();
    undoButton = new javax.swing.JButton();
    redoButton = new javax.swing.JButton();
    jPanel2 = new javax.swing.JPanel();
    jLabel3 = new javax.swing.JLabel();
    tempHealthSpinner = new javax.swing.JSpinner();
    setTempHealthButton = new javax.swing.JButton();
    healthJPanel = new javax.swing.JPanel(){
      protected void paintComponent(Graphics g) {
        super.paintComponent(g); 
        HealthState h = undoQueue.current();
        Graphics2D g2d = (Graphics2D) g;
        int temp = h.health.size();
        if (temp==0){
          temp=h.tempHealth;
        }
        if (temp>15){
          temp=15;
        }
        g2d.translate((healthJPanel.getWidth()/2)-((temp*(boxSize*1.25))/2), 10);
        AffineTransform at = g2d.getTransform();
        g2d.setColor(Color.BLUE);
        g2d.setStroke(thickStroke);
        for(int i = 0; i<h.tempHealth;i++){
          g2d.draw(box[0]);
          g2d.translate(boxSize*1.25, 0);
        }
        g2d.setTransform(at);
        g2d.translate(0, boxSize*1.25);
        g2d.setColor(Color.BLACK);
        for(int i = 0; i<h.health.size();i++){
          g2d.setStroke(defaultStroke);
          if (i>0&&(i%15)==0){
            g2d.translate(-boxSize*1.25*15, boxSize*1.25);
          }
          switch (h.health.get(i)){
            case 3:
            g2d.draw(box[3]);
            case 2:
            g2d.draw(box[2]);
            case 1:
            g2d.draw(box[1]);
            case 0:
            g2d.setStroke(thickStroke);
            g2d.draw(box[0]);
          }

          g2d.translate(boxSize*1.25, 0);
        }
      }
    }
    ;
    jPanel8 = new javax.swing.JPanel();
    healthLabel = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setPreferredSize(new java.awt.Dimension(416, 354));

    jPanel1.setLayout(new java.awt.GridBagLayout());

    againComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "10", "9", "8" }));
    againComboBox.setSelectedIndex(1);
    againComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        againComboBoxActionPerformed(evt);
      }
    });
    jPanel14.add(againComboBox);

    jLabel4.setText("Again");
    jPanel14.add(jLabel4);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    jPanel1.add(jPanel14, gridBagConstraints);

    jLabel1.setText("Dice Amount:");
    jPanel4.add(jLabel1);

    diceSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 99, 1));
    jPanel4.add(diceSpinner);

    rollButton.setText("Roll");
    rollButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        rollButtonActionPerformed(evt);
      }
    });
    jPanel4.add(rollButton);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    jPanel1.add(jPanel4, gridBagConstraints);

    jScrollPane1.setBorder(null);
    jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    jScrollPane1.setHorizontalScrollBar(null);
    jScrollPane1.setOpaque(false);

    diceTextArea.setColumns(20);
    diceTextArea.setLineWrap(true);
    diceTextArea.setRows(7);
    diceTextArea.setWrapStyleWord(true);
    diceTextArea.setFocusable(false);
    diceTextArea.setMargin(new java.awt.Insets(2, 10, 2, 10));
    diceTextArea.setOpaque(false);
    jScrollPane1.setViewportView(diceTextArea);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel1.add(jScrollPane1, gridBagConstraints);

    houseRuleCheckBox.setSelected(true);
    houseRuleCheckBox.setText("Dramatic Failure House Rule");
    houseRuleCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        houseRuleCheckBoxActionPerformed(evt);
      }
    });
    jPanel10.add(houseRuleCheckBox);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    jPanel1.add(jPanel10, gridBagConstraints);

    infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    infoLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    gridBagConstraints.weightx = 1.0;
    jPanel1.add(infoLabel, gridBagConstraints);

    jTabbedPane1.addTab("Dice Roller", jPanel1);

    jPanel3.setLayout(new java.awt.GridBagLayout());

    jPanel5.setLayout(new java.awt.GridBagLayout());

    jPanel12.add(jLabel5);

    bashingSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
    jPanel12.add(bashingSpinner);

    jLabel6.setText("Bashing");
    jPanel12.add(jLabel6);

    lethalSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
    jPanel12.add(lethalSpinner);

    jLabel7.setText("Lethal");
    jPanel12.add(jLabel7);

    aggravatedSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
    jPanel12.add(aggravatedSpinner);

    jLabel8.setText("Aggravated");
    jPanel12.add(jLabel8);

    damageButton.setText("Take Damage");
    damageButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        damageButtonActionPerformed(evt);
      }
    });
    jPanel12.add(damageButton);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    jPanel5.add(jPanel12, gridBagConstraints);

    jLabel2.setText("Max Health (Stamina + Size):");
    jPanel6.add(jLabel2);

    maxHealthSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 99, 1));
    maxHealthSpinner.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    jPanel6.add(maxHealthSpinner);

    setMaxHealthButton.setText("Set");
    setMaxHealthButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        setMaxHealthButtonActionPerformed(evt);
      }
    });
    jPanel6.add(setMaxHealthButton);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    jPanel5.add(jPanel6, gridBagConstraints);

    jPanel7.add(healLabel);

    healSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
    jPanel7.add(healSpinner);

    healButton.setText("Heal");
    healButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        healButtonActionPerformed(evt);
      }
    });
    jPanel7.add(healButton);

    jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
    jSeparator1.setPreferredSize(new java.awt.Dimension(1, 25));
    jPanel7.add(jSeparator1);

    downgradeButton.setText("Downgrade Injury");
    downgradeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        downgradeButtonActionPerformed(evt);
      }
    });
    jPanel7.add(downgradeButton);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    jPanel5.add(jPanel7, gridBagConstraints);

    clearButton.setText("Clear");
    clearButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        clearButtonActionPerformed(evt);
      }
    });
    jPanel13.add(clearButton);

    undoButton.setText("Undo");
    undoButton.setEnabled(false);
    undoButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        undoButtonActionPerformed(evt);
      }
    });
    jPanel13.add(undoButton);

    redoButton.setText("Redo");
    redoButton.setEnabled(false);
    redoButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        redoButtonActionPerformed(evt);
      }
    });
    jPanel13.add(redoButton);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    jPanel5.add(jPanel13, gridBagConstraints);

    jLabel3.setText("Temporary Health:");
    jPanel2.add(jLabel3);

    tempHealthSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
    jPanel2.add(tempHealthSpinner);

    setTempHealthButton.setText("Set");
    setTempHealthButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        setTempHealthButtonActionPerformed(evt);
      }
    });
    jPanel2.add(setTempHealthButton);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel5.add(jPanel2, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    jPanel3.add(jPanel5, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel3.add(healthJPanel, gridBagConstraints);

    javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
    jPanel8.setLayout(jPanel8Layout);
    jPanel8Layout.setHorizontalGroup(
      jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
      .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel8Layout.createSequentialGroup()
          .addGap(0, 0, Short.MAX_VALUE)
          .addComponent(healthLabel)
          .addGap(0, 0, Short.MAX_VALUE)))
    );
    jPanel8Layout.setVerticalGroup(
      jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
      .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel8Layout.createSequentialGroup()
          .addGap(0, 0, Short.MAX_VALUE)
          .addComponent(healthLabel)
          .addGap(0, 0, Short.MAX_VALUE)))
    );

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    jPanel3.add(jPanel8, gridBagConstraints);

    jTabbedPane1.addTab("Health Tracker", jPanel3);

    getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void againComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_againComboBoxActionPerformed
    if (roll != null) {
      roll.again(11 - againComboBox.getSelectedIndex());
      diceTextArea.setText(roll.toString());
      infoLabel.setText(roll.info(houseRuleCheckBox.isSelected()));
    }
  }//GEN-LAST:event_againComboBoxActionPerformed

  private void rollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollButtonActionPerformed
    roll = new Roll((int) diceSpinner.getValue(), (11 - againComboBox.getSelectedIndex()));
    diceTextArea.setText(roll.toString());
    infoLabel.setText(roll.info(houseRuleCheckBox.isSelected()));
  }//GEN-LAST:event_rollButtonActionPerformed

  private void houseRuleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseRuleCheckBoxActionPerformed
    if (roll != null) {
      infoLabel.setText(roll.info(houseRuleCheckBox.isSelected()));
    }
  }//GEN-LAST:event_houseRuleCheckBoxActionPerformed

  private void setMaxHealthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setMaxHealthButtonActionPerformed
    HealthState h = undoQueue.current().newMaxHealth((int) maxHealthSpinner.getValue());
    undoQueue.add(h);
    undoButton.setEnabled(undoQueue.isUndoable());
    redoButton.setEnabled(undoQueue.isRedoable());
    healLabel.setText(h.healInfo());
    healthLabel.setText(h.healthInfo());
    healthJPanel.repaint();
  }//GEN-LAST:event_setMaxHealthButtonActionPerformed

  private void damageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_damageButtonActionPerformed
    int bashing = (int) bashingSpinner.getValue();
    int lethal = (int) lethalSpinner.getValue();
    int aggravated = (int) aggravatedSpinner.getValue();
    if ((bashing + lethal + aggravated) > 0 && undoQueue.current().health.size() > 0) {
      int damages[] = {bashing, lethal, aggravated};
      HealthState h = undoQueue.current().damage(damages);
      undoQueue.add(h);
      undoButton.setEnabled(undoQueue.isUndoable());
      redoButton.setEnabled(undoQueue.isRedoable());
      healLabel.setText(h.healInfo());
      healthLabel.setText(h.healthInfo());
      healthJPanel.repaint();
    }
  }//GEN-LAST:event_damageButtonActionPerformed

  private void setTempHealthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTempHealthButtonActionPerformed
    if (undoQueue.current().health.size() > 0) {
      HealthState h = undoQueue.current().newTempHealth((int) tempHealthSpinner.getValue());
      undoQueue.add(h);
      undoButton.setEnabled(undoQueue.isUndoable());
      redoButton.setEnabled(undoQueue.isRedoable());
      healLabel.setText(h.healInfo());
      healthLabel.setText(h.healthInfo());
      healthJPanel.repaint();
    }
  }//GEN-LAST:event_setTempHealthButtonActionPerformed

  private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
    HealthState h = undoQueue.current().clear();
    undoQueue.add(h);
    undoButton.setEnabled(undoQueue.isUndoable());
    redoButton.setEnabled(undoQueue.isRedoable());
    healLabel.setText(h.healInfo());
    healthLabel.setText(h.healthInfo());
    healthJPanel.repaint();
  }//GEN-LAST:event_clearButtonActionPerformed

  private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
    undoQueue.undo();
    undoButton.setEnabled(undoQueue.isUndoable());
    redoButton.setEnabled(undoQueue.isRedoable());
    healLabel.setText(undoQueue.current().healInfo());
    healthLabel.setText(undoQueue.current().healthInfo());
    healthJPanel.repaint();
  }//GEN-LAST:event_undoButtonActionPerformed

  private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
    undoQueue.redo();
    undoButton.setEnabled(undoQueue.isUndoable());
    redoButton.setEnabled(undoQueue.isRedoable());
    healLabel.setText(undoQueue.current().healInfo());
    healthLabel.setText(undoQueue.current().healthInfo());
    healthJPanel.repaint();
  }//GEN-LAST:event_redoButtonActionPerformed

  private void healButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_healButtonActionPerformed
    HealthState h = undoQueue.current().heal((int) healSpinner.getValue());
    undoQueue.add(h);
    undoButton.setEnabled(undoQueue.isUndoable());
    redoButton.setEnabled(undoQueue.isRedoable());
    healLabel.setText(h.healInfo());
    healthLabel.setText(h.healthInfo());
    healthJPanel.repaint();
  }//GEN-LAST:event_healButtonActionPerformed

  private void downgradeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downgradeButtonActionPerformed
    HealthState h = undoQueue.current().downgrade();
    undoQueue.add(h);
    undoButton.setEnabled(undoQueue.isUndoable());
    redoButton.setEnabled(undoQueue.isRedoable());
    healLabel.setText(h.healInfo());
    healthLabel.setText(h.healthInfo());
    healthJPanel.repaint();
  }//GEN-LAST:event_downgradeButtonActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Windows".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(CoDDiceRoller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(CoDDiceRoller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(CoDDiceRoller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(CoDDiceRoller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new CoDDiceRoller().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox<String> againComboBox;
  private javax.swing.JSpinner aggravatedSpinner;
  private javax.swing.JSpinner bashingSpinner;
  private javax.swing.JButton clearButton;
  private javax.swing.JButton damageButton;
  private javax.swing.JSpinner diceSpinner;
  private javax.swing.JTextArea diceTextArea;
  private javax.swing.JButton downgradeButton;
  private javax.swing.JButton healButton;
  private javax.swing.JLabel healLabel;
  private javax.swing.JSpinner healSpinner;
  private javax.swing.JPanel healthJPanel;
  private javax.swing.JLabel healthLabel;
  private javax.swing.JCheckBox houseRuleCheckBox;
  private javax.swing.JLabel infoLabel;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel10;
  private javax.swing.JPanel jPanel12;
  private javax.swing.JPanel jPanel13;
  private javax.swing.JPanel jPanel14;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JPanel jPanel5;
  private javax.swing.JPanel jPanel6;
  private javax.swing.JPanel jPanel7;
  private javax.swing.JPanel jPanel8;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JSeparator jSeparator1;
  private javax.swing.JTabbedPane jTabbedPane1;
  private javax.swing.JSpinner lethalSpinner;
  private javax.swing.JSpinner maxHealthSpinner;
  private javax.swing.JButton redoButton;
  private javax.swing.JButton rollButton;
  private javax.swing.JButton setMaxHealthButton;
  private javax.swing.JButton setTempHealthButton;
  private javax.swing.JSpinner tempHealthSpinner;
  private javax.swing.JButton undoButton;
  // End of variables declaration//GEN-END:variables
}
